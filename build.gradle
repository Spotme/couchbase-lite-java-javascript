buildscript {
    repositories {
        maven { url 'http://repo1.maven.org/maven2' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.4.2'
    }
}
apply plugin: 'android-library'
apply plugin: 'maven'

repositories {
    mavenLocal()
    mavenCentral()
}

// apply from: 'dependencies.gradle'               // <- enable this in "normal" building
// apply from: 'dependencies-archive.gradle'    // <- enable this when building an .aar
apply from: 'dependencies-test.gradle'       // <- enable this when testing


android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 7
        targetSdkVersion 16
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://maven.hq.couchbase.com:8081/nexus/content/repositories/releases/") {
                authentication(userName: '***', password: '***')
            }
            pom.version = '0.7'
            pom.groupId = 'com.couchbase.cblite'
            pom.artifactId = 'CBLiteJavascript'
        }
    }
}

// /begin .so hack - this is a hack until gradle supports dependencies on .so objects
// the hack is described here:
//      http://stackoverflow.com/questions/16683775/include-so-library-in-apk-in-android-studio
// I had to modify it slightly to change buildDir -> getProjectDir()

task copyNativeLibs(type: Copy) {
    from(new File(project(':CBLite').getProjectDir(), 'native-libs')) { include '**/*.so' }
    into new File(buildDir, 'native-libs')
}

tasks.withType(Compile) { compileTask -> compileTask.dependsOn copyNativeLibs }

clean.dependsOn 'cleanCopyNativeLibs'

tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
    pkgTask.jniDir new File(buildDir, 'native-libs')
}

// /end .so hack